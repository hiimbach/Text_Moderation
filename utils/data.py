import pandas as pd
import torch

from torch.utils.data import Dataset


CLASS_NAMES = ['Suicide', 'Politics', 'Attack', 'Discrimination', 'Safe']


class CustomDataset(Dataset):
    def __init__(self, csv_file, idx_list=None):
        '''
        Custom torch.utils.data.Dataset from data generated by fn data_split above
        
        Arguments:
            data (dict): {'img_path': [], 'label': []}
            transform: torchvision.transforms
        '''
        
        self.df = pd.read_csv(csv_file)
        if idx_list:
            self.df = self.df.loc[idx_list]
        
        self.text_list = self.df['Text'].values.tolist()
        self.labels = self.df[['Suicide', 'Politics', 'Attack', 'Discrimination', 'Safe']].values.tolist()
        
        assert len(self.text_list) == len(self.labels)
        
    def __getitem__(self, idx):
        try:
            text = self.text_list[idx]
            label = self.labels[idx]
        except:
            text = self.text_list[0]
            label = self.labels[0]
        return text, torch.tensor(label, dtype=torch.float64)
        
    def __len__(self):
        return len(self.text_list)
        

def data_split(csv_file, split_ratio=0.8):
    '''
    To keep the distribution in train set similar to val set
    '''
    
    train_idx = []
    val_idx = []
    
    df = pd.read_csv(csv_file)

    for cls in CLASS_NAMES:
        df_cls = df[df[cls] == 1]
        
        train_amount = int(split_ratio*df_cls.shape[0]) 
        train_add = df_cls.sample(train_amount).index.tolist()
        train_idx += train_add
        
        val_add = df_cls.loc[~df_cls.index.isin(train_add)].index.tolist()
        val_idx += val_add
        
    return train_idx, val_idx
        